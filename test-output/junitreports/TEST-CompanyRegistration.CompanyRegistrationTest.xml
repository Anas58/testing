<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="hqr-aabdulkarem" failures="0" tests="24" name="CompanyRegistration.CompanyRegistrationTest" time="0.094" errors="1" timestamp="2022-03-24T12:16:58 AST" skipped="23">
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="launchBrowser" time="0.094">
    <error message="The driver executable must exist: C:\Users\abdulkarim-c\IdeaProjects\TestNGtmp\..\resources\chromedriver.exe" type="java.lang.IllegalStateException">
      <![CDATA[java.lang.IllegalStateException: The driver executable must exist: C:\Users\abdulkarim-c\IdeaProjects\TestNGtmp\..\resources\chromedriver.exe
at org.openqa.selenium.internal.Require$FileStateChecker.isFile(Require.java:342)
at org.openqa.selenium.remote.service.DriverService.checkExecutable(DriverService.java:147)
at org.openqa.selenium.remote.service.DriverService.findExecutable(DriverService.java:142)
at org.openqa.selenium.chrome.ChromeDriverService.access$000(ChromeDriverService.java:38)
at org.openqa.selenium.chrome.ChromeDriverService$Builder.findDefaultExecutable(ChromeDriverService.java:231)
at org.openqa.selenium.remote.service.DriverService$Builder.build(DriverService.java:437)
at org.openqa.selenium.chrome.ChromeDriverService.createDefaultService(ChromeDriverService.java:127)
at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:48)
at CompanyRegistration.CompanyRegistrationTest.launchBrowser(CompanyRegistrationTest.java:43)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:385)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:321)
at org.testng.TestRunner.invokeTestConfigurations(TestRunner.java:637)
at org.testng.TestRunner.beforeRun(TestRunner.java:627)
at org.testng.TestRunner.run(TestRunner.java:589)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at Application.App.runTest(App.java:133)
at Application.App.main(App.java:146)
]]>
    </error>
  </testcase> <!-- launchBrowser -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="verifyCompanyRegistrationLabels" time="0.000">
    <skipped/>
  </testcase> <!-- verifyCompanyRegistrationLabels -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="refreshButtonInCompanyRegistration" time="0.000">
    <skipped/>
  </testcase> <!-- refreshButtonInCompanyRegistration -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="negativeCompanyRegistration" time="0.000">
    <skipped/>
  </testcase> <!-- negativeCompanyRegistration -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="positiveCompanyRegistration" time="0.000">
    <skipped/>
  </testcase> <!-- positiveCompanyRegistration -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="verifyCompanyInformationLabels" time="0.000">
    <skipped/>
  </testcase> <!-- verifyCompanyInformationLabels -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="negativeCompanyInformationTest" time="0.000">
    <skipped/>
  </testcase> <!-- negativeCompanyInformationTest -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="positiveCompanyInformationTest" time="0.000">
    <skipped/>
  </testcase> <!-- positiveCompanyInformationTest -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="branchDetailsNegativeTest" time="0.000">
    <skipped/>
  </testcase> <!-- branchDetailsNegativeTest -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="branchDetailsPositiveTest" time="0.000">
    <skipped/>
  </testcase> <!-- branchDetailsPositiveTest -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="activityDetailsNegativeTest" time="0.000">
    <skipped/>
  </testcase> <!-- activityDetailsNegativeTest -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="activityDetailsPositiveTest" time="0.000">
    <skipped/>
  </testcase> <!-- activityDetailsPositiveTest -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="addressDetailsNegativeTest" time="0.000">
    <skipped/>
  </testcase> <!-- addressDetailsNegativeTest -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="addressDetailsPositiveTest" time="0.000">
    <skipped/>
  </testcase> <!-- addressDetailsPositiveTest -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="contactPersonNegativeTest" time="0.000">
    <skipped/>
  </testcase> <!-- contactPersonNegativeTest -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="contactPersonPositiveTest" time="0.000">
    <skipped/>
  </testcase> <!-- contactPersonPositiveTest -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="negativeShareholderPercentageDetails" time="0.000">
    <skipped/>
  </testcase> <!-- negativeShareholderPercentageDetails -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="positiveShareholderPercentageDetails" time="0.000">
    <skipped/>
  </testcase> <!-- positiveShareholderPercentageDetails -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="shareholderDetailsNegative" time="0.000">
    <skipped/>
  </testcase> <!-- shareholderDetailsNegative -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="shareholderDetailsPositive" time="0.000">
    <skipped/>
  </testcase> <!-- shareholderDetailsPositive -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="communicationDetailsPositive" time="0.000">
    <skipped/>
  </testcase> <!-- communicationDetailsPositive -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="positive_financialDetails" time="0.000">
    <skipped/>
  </testcase> <!-- positive_financialDetails -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="positivePasswordTest" time="0.000">
    <skipped/>
  </testcase> <!-- positivePasswordTest -->
  <system-out/>
  <testcase classname="CompanyRegistration.CompanyRegistrationTest" name="acknowledgmentTest" time="0.000">
    <skipped/>
  </testcase> <!-- acknowledgmentTest -->
  <system-out/>
</testsuite> <!-- CompanyRegistration.CompanyRegistrationTest -->
